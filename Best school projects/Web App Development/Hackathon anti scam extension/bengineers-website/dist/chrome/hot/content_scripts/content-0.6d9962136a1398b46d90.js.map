{"version":3,"file":"hot/content_scripts/content-0.6d9962136a1398b46d90.js","mappingsjBA","sources":["webpack://bengineers/./content/ContentApp.tsx","webpack://bengineers/webpack/runtime/getFullHash"],"sourcesContent":["__webpack_require__.$Refresh$.runtime = require('C:/Users/benja/Desktop/bengineers/node_modules/react-refresh/runtime.js');\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nvar _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { initializeApp } from \"@firebase/app\";\nimport { addDoc, collection, getDocs, getFirestore } from \"@firebase/firestore\";\nimport { updateDoc } from \"@firebase/firestore\";\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDyUws3vjsFtKJrCxS7xNOxLeNqg2df-pI\",\n    authDomain: \"bengineering-hackrift.firebaseapp.com\",\n    projectId: \"bengineering-hackrift\",\n    storageBucket: \"bengineering-hackrift.firebasestorage.app\",\n    messagingSenderId: \"467110689511\",\n    appId: \"1:467110689511:web:b48a00564cb7b5f36e0042\"\n};\nconst app = initializeApp(firebaseConfig);\nfunction getPost(postid) {\n    return _getPost.apply(this, arguments);\n}\nfunction _getPost() {\n    _getPost = _async_to_generator(function*(postid) {\n        const db = getFirestore(app);\n        const postsCol = collection(db, 'posts');\n        const querySnapshot = yield getDocs(postsCol);\n        const post = querySnapshot.docs.find((doc)=>doc.data().postid === postid);\n        return post === null || post === void 0 ? void 0 : post.data();\n    });\n    return _getPost.apply(this, arguments);\n}\nfunction getPostDocByPostId(postid) {\n    return _getPostDocByPostId.apply(this, arguments);\n}\nfunction _getPostDocByPostId() {\n    _getPostDocByPostId = _async_to_generator(function*(postid) {\n        const db = getFirestore(app);\n        const postsCol = collection(db, 'posts');\n        const querySnapshot = yield getDocs(postsCol);\n        return querySnapshot.docs.find((doc)=>doc.data().postid === postid);\n    });\n    return _getPostDocByPostId.apply(this, arguments);\n}\nfunction addPost(postid, approvednotes, reliabilitytag, sourcetag, timestamp, topictag, unapprovednotes, content) {\n    return _addPost.apply(this, arguments);\n}\nfunction _addPost() {\n    _addPost = _async_to_generator(function*(postid, approvednotes, reliabilitytag, sourcetag, timestamp, topictag, unapprovednotes, content) {\n        const db = getFirestore(app);\n        const postDoc = yield getPostDocByPostId(postid);\n        if (postDoc) {\n            // Use updateDoc:\n            const docRef = postDoc.ref;\n            yield updateDoc(docRef, {\n                approvednotes: [\n                    ...postDoc.data().approvednotes,\n                    ...approvednotes\n                ],\n                reliabilitytag: [\n                    ...postDoc.data().reliabilitytag,\n                    ...reliabilitytag\n                ],\n                sourcetag: [\n                    ...postDoc.data().sourcetag,\n                    ...sourcetag\n                ],\n                timestamp: timestamp.toISOString(),\n                topictag: [\n                    ...postDoc.data().topictag,\n                    ...topictag\n                ],\n                unapprovednotes: [\n                    ...postDoc.data().unapprovednotes,\n                    ...unapprovednotes\n                ],\n                content: postDoc.data().content\n            });\n        } else {\n            // Use addDoc only when creating a new post:\n            const db = getFirestore(app);\n            const postsCol = collection(db, 'posts');\n            yield addDoc(postsCol, {\n                approvednotes,\n                postid,\n                reliabilitytag,\n                sourcetag,\n                timestamp: timestamp.toISOString(),\n                topictag,\n                unapprovednotes,\n                content\n            });\n        }\n    });\n    return _addPost.apply(this, arguments);\n}\n// async function addPost(postid: string, approvednotes: string[], reliabilitytag: string[], sourcetag: string[], timestamp: Date, topictag: string[], unapprovednotes: string[], content: string) {\n//     const db = getFirestore(app);\n//     const postsCol = collection(db, 'posts') as CollectionReference<Post>;\n//     console.log(\"add\")\n//     console.log(timestamp)\n//     console.log(postid)\n//     // Update the document if it already exists\n//     const post = await getPost(postid);\n//     if (post) {\n//         await addDoc(postsCol, {\n//             approvednotes: [...post.approvednotes, ...approvednotes],\n//             postid,\n//             reliabilitytag: [...post.reliabilitytag, ...reliabilitytag],\n//             sourcetag: [...post.sourcetag, ...sourcetag],\n//             timestamp: timestamp.toISOString(),\n//             topictag: [...post.topictag, ...topictag],\n//             unapprovednotes: [...post.unapprovednotes, ...unapprovednotes],\n//             content: post.content,\n//         });\n//     } else {\n//         await addDoc(postsCol, {\n//             approvednotes: [...approvednotes],\n//             postid,\n//             reliabilitytag: [...reliabilitytag],\n//             sourcetag: [...sourcetag],\n//             timestamp: timestamp.toISOString(),\n//             topictag: [...topictag],\n//             unapprovednotes: [...unapprovednotes],\n//             content: content,\n//         });\n//     }\n// }\nexport default function ContentApp() {\n    _s();\n    useEffect(()=>{\n        const targetNode = document.querySelector('div[role=\"main\"]');\n        function processElement(element) {\n            return _processElement.apply(this, arguments);\n        }\n        function _processElement() {\n            _processElement = // **Changed**: Define an async function to handle the element processing\n            _async_to_generator(function*(element) {\n                const today = new Date();\n                let timestamp = new Date(today); // Copy current date\n                // Your timestamp logic\n                const textContent = element.textContent || \"\";\n                if (textContent.includes(\"hours ago\") || textContent.includes(\"minutes ago\")) {\n                    timestamp = today;\n                } else if (textContent.includes(\"days ago\")) {\n                    const match = textContent.match(/^(\\d+)\\s+days\\s+ago$/);\n                    if (match) {\n                        const days = parseInt(match[1], 10);\n                        timestamp.setDate(today.getDate() - days);\n                    }\n                } else if (textContent.includes(\"day ago\")) {\n                    timestamp.setDate(today.getDate() - 1);\n                } else if (/(\\d{1,2})\\s([A-Za-z]+)\\s(\\d{4})/.test(textContent)) {\n                    timestamp = extractDateYear(textContent);\n                } else if (/(\\d{1,2})\\s([A-Za-z]+)/.test(textContent)) {\n                    const appendedDate = appendCurrentYear(textContent);\n                    if (appendedDate) {\n                        timestamp = new Date(appendedDate);\n                    }\n                } else {\n                    timestamp.setDate(today.getDate() + 1);\n                }\n                let parent = element.parentElement;\n                for(let i = 0; i < 8; i++){\n                    if (!parent) break;\n                    parent = parent.parentElement;\n                }\n                if (!parent) return;\n                let href = parent.querySelectorAll('a');\n                var event = new FocusEvent('focusin', {\n                    view: window,\n                    bubbles: true,\n                    cancelable: true\n                });\n                href.forEach((link)=>link.dispatchEvent(event));\n                const filteredHref = Array.from(href).filter((link)=>link.href.includes('/posts'));\n                if (filteredHref.length === 0) {\n                    console.log('No post link found for this element.');\n                    return;\n                }\n                const filteredHrefStr = filteredHref[0].href;\n                console.log(filteredHrefStr);\n                const baseHref = filteredHrefStr.split('?')[0];\n                if (parent.querySelector('button') === null) {\n                    var _parent_querySelector;\n                    let content = (_parent_querySelector = parent.querySelector('[data-ad-comet-preview=\"message\"]')) === null || _parent_querySelector === void 0 ? void 0 : _parent_querySelector.textContent;\n                    console.log(content);\n                    // **Changed**: Now we can await getPost here\n                    const postData = yield getPost(baseHref);\n                    console.log(postData);\n                    // Now proceed with DOM manipulation based on postData\n                    const mainContainer = document.createElement('div');\n                    mainContainer.classList.add(\"extension-container\");\n                    let sourceTag = \"None Yet\";\n                    let topicTags = [\n                        \"None\"\n                    ];\n                    let reliabilityTag = \"None Yet\";\n                    let communityNote = \"None Yet\";\n                    if (postData) {\n                        sourceTag = getMostFrequentTag(postData.sourcetag) || \"None Yet\";\n                        topicTags = postData.topictag || [\n                            \"None\"\n                        ];\n                        reliabilityTag = getMostFrequentTag(postData.reliabilitytag) || \"None Yet\";\n                        communityNote = postData.approvednotes || \"None Yet\";\n                    } else {\n                        sourceTag = \"None Yet\";\n                        topicTags = [\n                            \"None\"\n                        ];\n                        reliabilityTag = \"None Yet\";\n                        communityNote = \"None Yet\";\n                    }\n                    // Create and append the source tag\n                    const sourceTagDiv = document.createElement('div');\n                    sourceTagDiv.className = 'tag source-tag';\n                    sourceTagDiv.textContent = sourceTag; // Assuming sourceTag is a variable holding a string\n                    mainContainer.appendChild(sourceTagDiv);\n                    // Create and append the reliability tag\n                    const reliabilityTagDiv = document.createElement('div');\n                    reliabilityTagDiv.className = 'tag reliability-tag';\n                    reliabilityTagDiv.textContent = reliabilityTag; // Assuming reliabilityTag is a variable holding a string\n                    mainContainer.appendChild(reliabilityTagDiv);\n                    // Create and append the show-more button\n                    const showMoreBtn = document.createElement('div');\n                    showMoreBtn.className = 'show-more-btn';\n                    showMoreBtn.textContent = 'V';\n                    showMoreBtn.setAttribute('onClick', 'expand()');\n                    mainContainer.appendChild(showMoreBtn);\n                    // Create and append the extra content container\n                    const extraContentDiv = document.createElement('div');\n                    extraContentDiv.className = 'hidden extra-content';\n                    // Notes paragraph\n                    const notesP = document.createElement('p');\n                    notesP.className = 'tags-p';\n                    notesP.innerHTML = `<span class=\"title\">Notes: </span>${communityNote}`;\n                    extraContentDiv.appendChild(notesP);\n                    // Relevant Topics paragraph\n                    const relevantTopicsP = document.createElement('p');\n                    relevantTopicsP.className = 'tags-p';\n                    relevantTopicsP.innerHTML = '<span class=\"title\">Relevant Topics: </span><span>tagname</span>'; // Static content\n                    extraContentDiv.appendChild(relevantTopicsP);\n                    // User Topics paragraph\n                    const userTopicsP = document.createElement('p');\n                    userTopicsP.className = 'tags-p';\n                    var tagsOutput = \"\";\n                    for(var i = 0; i < topicTags.length; i++){\n                        tagsOutput += '<span class=\"user-topic\">' + topicTags[i] + \"</span>\";\n                    }\n                    userTopicsP.innerHTML = '<span class=\"title\">User Topics: ' + tagsOutput + '</span>'; // Static content\n                    extraContentDiv.appendChild(userTopicsP);\n                    // Add Tag or Note paragraph\n                    const addTagOrNoteP = document.createElement('p');\n                    addTagOrNoteP.className = 'tags-p';\n                    // Title span\n                    const addTagOrNoteTitle = document.createElement('span');\n                    addTagOrNoteTitle.className = 'title';\n                    addTagOrNoteTitle.textContent = 'Add a Tag or Note: ';\n                    addTagOrNoteP.appendChild(addTagOrNoteTitle);\n                    // Add Note div\n                    const addNoteDiv = document.createElement('div');\n                    addNoteDiv.className = 'add-note';\n                    addNoteDiv.textContent = 'Add Note';\n                    addNoteDiv.setAttribute('onClick', 'openmodal1()');\n                    addTagOrNoteP.appendChild(addNoteDiv);\n                    // Add Tag div\n                    const addTagDiv = document.createElement('div');\n                    addTagDiv.className = 'add-tag';\n                    addTagDiv.textContent = 'Add Tag';\n                    addTagDiv.setAttribute('onClick', 'openmodal2()');\n                    addTagOrNoteP.appendChild(addTagDiv);\n                    // Append the Add Tag or Note paragraph to extra content\n                    extraContentDiv.appendChild(addTagOrNoteP);\n                    // Append the extra content to the main container\n                    mainContainer.appendChild(extraContentDiv);\n                    const addTagModal = document.createElement('div');\n                    addTagModal.className = 'add-tag-modal hidden';\n                    const addTagForm = document.createElement('form');\n                    addTagForm.id = \"add-tag-form\";\n                    addTagForm.innerHTML = '<h3>Add Tags</h3>\\\r\n<div class= \"form-group\">\\\r\n<span>Reliability:</span>\\\r\n <input type=\"radio\" id=\"reliable\" name=\"reliability\" value=\"Reliable\">\\\r\n<label for=\"reliable\">Reliable</label><br>\\\r\n<input type=\"radio\" id=\"mostly-reliable\" name=\"reliability\" value=\"Mostly-Reliable\">\\\r\n<label for=\"mostly-reliable\">Mostly-Reliable</label><br>\\\r\n<input type=\"radio\" id=\"mixed\" name=\"reliability\" value=\"Mixed\">\\\r\n<label for=\"mixed\">Mixed</label>\\\r\n<input type=\"radio\" id=\"likely-false\" name=\"reliability\" value=\"Likely-False\">\\\r\n<label for=\"likely-false\">Likely-False</label>\\\r\n<input type=\"radio\" id=\"false\" name=\"reliability\" value=\"False\">\\\r\n<label for=\"false\">False</label></div>\\\r\n<div class= \"form-group\">\\\r\n<span>Source:</span>\\\r\n <input type=\"radio\" id=\"ai\" name=\"source\" value=\"AI\">\\\r\n<label for=\"ai\">AI</label><br>\\\r\n<input type=\"radio\" id=\"Opinion\" name=\"source\" value=\"Opinion\">\\\r\n<label for=\"Opinion\">Opinion</label><br>\\\r\n <input type=\"radio\" id=\"news\" name=\"source\" value=\"News\">\\\r\n<label for=\"news\">News</label><br>\\\r\n <input type=\"radio\" id=\"Advertising\" name=\"source\" value=\"Advertising\">\\\r\n<label for=\"Advertising\">Advertising</label><br>\\\r\n<div class= \"form-group\">\\\r\n  <label for=\"topic\"><span>Topic:</span></label>\\\r\n  <input type=\"text\" id=\"topic\" name=\"topic\"><br>\\\r\n</div>';\n                    const addTagButton = document.createElement('button');\n                    addTagButton.className = \"form-button\";\n                    addTagButton.addEventListener('click', (event)=>submitTags(event, filteredHrefStr, timestamp, content, addTagForm));\n                    addTagButton.innerText = \"Add Tags\";\n                    addTagForm.append(addTagButton);\n                    addTagModal.appendChild(addTagForm);\n                    const addNoteForm = document.createElement('form');\n                    addNoteForm.id = \"add-note-form\";\n                    addNoteForm.innerHTML = '<h3>Add Notes</h3>\\\r\n<div class= \"form-group\">\\\r\n  <label for=\"note\"><span>Note:</span></label>\\\r\n  <input type=\"text\" id=\"note\" name=\"note\"><br>\\\r\n</div>';\n                    const addNoteModal = document.createElement('div');\n                    addNoteModal.className = 'add-note-modal hidden';\n                    const addNoteButton = document.createElement('button');\n                    addNoteButton.className = \"form-button\";\n                    addNoteButton.addEventListener('click', (event)=>submitNotes(event, filteredHrefStr, timestamp, content, addNoteForm));\n                    addNoteButton.innerText = \"Add Notes\";\n                    addNoteForm.appendChild(addNoteButton);\n                    addNoteModal.appendChild(addNoteForm);\n                    mainContainer.appendChild(addTagModal);\n                    mainContainer.appendChild(addNoteModal);\n                    const existingContainer = parent.querySelector('.extension-container');\n                    if (existingContainer) {\n                        const sourceEl = existingContainer.querySelector('.source-tag');\n                        if (sourceEl) sourceEl.textContent = sourceTag;\n                        const reliabilityEl = existingContainer.querySelector('.reliability-tag');\n                        if (reliabilityEl) reliabilityEl.textContent = reliabilityTag;\n                        const titleEl = existingContainer.querySelector('.tags-p .title');\n                        if (titleEl && titleEl.nextSibling) {\n                            // nextSibling is a Node, which has textContent\n                            titleEl.nextSibling.textContent = communityNote;\n                        }\n                    // Update other fields as needed\n                    } else {\n                        // Insert the container as you currently do\n                        if (parent.querySelector('.extension-container') === null) {\n                            parent.insertBefore(mainContainer, parent.children[2]);\n                        }\n                    }\n                }\n            });\n            return _processElement.apply(this, arguments);\n        }\n        const observer = new MutationObserver(()=>{\n            const elements = document.querySelectorAll('span.x4k7w5x.x1h91t0o.x1h9r5lt.x1jfb8zj.xv2umb2.x1beo9mf.xaigb6o.x12ejxvf.x3igimt.xarpa2k.xedcshv.x1lytzrv.x1t2pt76.x7ja8zs.x1qrby5j');\n            const filteredElements = Array.from(elements).filter((element)=>{\n                const text = element.textContent || \"\";\n                return /(\\d{1,2})\\s(January|February|March|April|May|June|July|August|September|October|November|December)/i.test(text) || text.includes('ago') || text.includes('AM') || text.includes('PM');\n            });\n            // **Changed**: Call processElement for each element without await\n            filteredElements.forEach((element)=>{\n                processElement(element).catch((err)=>console.error(err));\n            });\n        });\n        if (targetNode) {\n            observer.observe(targetNode, {\n                attributes: true,\n                childList: true,\n                subtree: true\n            });\n        }\n        return ()=>observer.disconnect();\n    }, []);\n    return null;\n}\n_s(ContentApp, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ContentApp;\nfunction submitTags(e, postid, timestamp, content, form) {\n    return _submitTags.apply(this, arguments);\n}\nfunction _submitTags() {\n    _submitTags = // Function to handle form submission\n    _async_to_generator(function*(e, postid, timestamp, content, form) {\n        var _form_querySelector, _form_querySelector1, _form_querySelector2;\n        console.log(\"submit\");\n        // Get the form element\n        e.preventDefault();\n        // Get the selected radio button value\n        // const reliabilitytag = (form?.querySelector('input[name=\"reliability\"]:checked') as HTMLInputElement)?.value;\n        // console.log(reliabilitytag)\n        // console.log(postid)\n        // console.log(timestamp)\n        // console.log(content)\n        // const sourcetag = (form?.querySelector('input[name=\"source\"]:checked') as HTMLInputElement)?.value;\n        // console.log(sourcetag)\n        // const topictag = (form?.querySelector('input[name=\"topic\"]') as HTMLInputElement)?.value;\n        // console.log(topictag)\n        e.preventDefault();\n        const reliabilitytag = form === null || form === void 0 ? void 0 : (_form_querySelector = form.querySelector('input[name=\"reliability\"]:checked')) === null || _form_querySelector === void 0 ? void 0 : _form_querySelector.value;\n        const sourcetag = form === null || form === void 0 ? void 0 : (_form_querySelector1 = form.querySelector('input[name=\"source\"]:checked')) === null || _form_querySelector1 === void 0 ? void 0 : _form_querySelector1.value;\n        const topictag = form === null || form === void 0 ? void 0 : (_form_querySelector2 = form.querySelector('input[name=\"topic\"]')) === null || _form_querySelector2 === void 0 ? void 0 : _form_querySelector2.value;\n        const baseHref = postid.split('?')[0];\n        if (reliabilitytag) {\n            yield addPost(baseHref, [], [\n                reliabilitytag\n            ], [\n                sourcetag\n            ], timestamp, [\n                topictag\n            ], [], content);\n        } else {\n            alert(\"Please select a tag before submitting.\");\n        }\n    });\n    return _submitTags.apply(this, arguments);\n}\nfunction submitNotes(e, postid, timestamp, content, form) {\n    return _submitNotes.apply(this, arguments);\n}\nfunction _submitNotes() {\n    _submitNotes = // Function to handle form submission\n    _async_to_generator(function*(e, postid, timestamp, content, form) {\n        var _form_querySelector;\n        e.preventDefault();\n        const notes = form === null || form === void 0 ? void 0 : (_form_querySelector = form.querySelector('input[name=\"note\"]')) === null || _form_querySelector === void 0 ? void 0 : _form_querySelector.value;\n        // Normalize postid by removing query parameters\n        const baseHref = postid.split('?')[0];\n        if (notes) {\n            yield addPost(baseHref, [\n                notes\n            ], [], [], timestamp, [], [], content); // Add to approvednotes\n        } else {\n            alert(\"Please enter a note before submitting.\");\n        }\n    });\n    return _submitNotes.apply(this, arguments);\n}\nfunction extractDateYear(element) {\n    const dateRegex = /(\\d{1,2})\\s(January|February|March|April|May|June|July|August|September|October|November|December)\\s(\\d{4})/i;\n    const match = element.match(dateRegex);\n    if (match) {\n        const day = parseInt(match[1], 10);\n        const month = match[2];\n        const year = parseInt(match[3], 10);\n        console.log(`Day: ${day}, Month: ${month}, Year: ${year}`);\n        // Return a formatted date string (e.g., \"2 October 2023\")\n        return {\n            day,\n            month,\n            year\n        };\n    } else {\n        return new Date(); // No valid date was found\n    }\n}\nfunction appendCurrentYear(text) {\n    // Get the current year\n    const currentYear = new Date().getFullYear();\n    // Regular expression to match a day and month (e.g., \"2 October\")\n    const dateRegex = /(\\d{1,2})\\s(January|February|March|April|May|June|July|August|September|October|November|December)/i;\n    const match = text.match(dateRegex);\n    if (match) {\n        const day = match[1];\n        const month = match[2];\n        // Return the formatted string with the current year appended\n        return `${day} ${month} ${currentYear}`;\n    }\n    return null; // No match found\n}\nfunction getMostFrequentTag(tags) {\n    if (tags.length === 0) {\n        return null; // Return null if the array is empty\n    }\n    // Define an object to hold counts with string keys and number values\n    const tagCounts = {};\n    tags.forEach((tag)=>{\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1; // Increment count for each tag\n    });\n    // Find the tag with the highest count\n    let mostFrequentTag = null;\n    let maxCount = 0;\n    for (const [tag, count] of Object.entries(tagCounts)){\n        if (count > maxCount) {\n            maxCount = count;\n            mostFrequentTag = tag;\n        }\n    }\n    return mostFrequentTag;\n}\nfunction getPermanentPostLink(tempUrl) {\n    return _getPermanentPostLink.apply(this, arguments);\n}\nfunction _getPermanentPostLink() {\n    _getPermanentPostLink = _async_to_generator(function*(tempUrl) {\n        try {\n            // Send a request with redirect: 'manual' to prevent automatic redirects\n            const response = yield fetch(tempUrl, {\n                method: 'GET',\n                redirect: 'manual'\n            });\n            // Check if a redirect is present\n            const redirectUrl = response.headers.get('Location');\n            if (redirectUrl) {\n                console.log('Permanent URL:', redirectUrl);\n            } else {\n                console.log('No redirect found.');\n            }\n        } catch (error) {\n            console.error('Error fetching the URL:', error);\n        }\n    });\n    return _getPermanentPostLink.apply(this, arguments);\n}\n// Replace 'TEMP_POST_URL' with the temporary URL you have\nconst tempPostUrl = 'https://www.facebook.com/some-temporary-url';\ngetPermanentPostLink(tempPostUrl);\nvar _c;\n$RefreshReg$(_c, \"ContentApp\");\n\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (module.hot) {\n\t\tlet errorOverlay;\n\t\tif (typeof __react_refresh_error_overlay__ !== 'undefined') {\n\t\t\terrorOverlay = __react_refresh_error_overlay__;\n\t\t}\n\t\tlet testMode;\n\t\tif (typeof __react_refresh_test__ !== 'undefined') {\n\t\t\ttestMode = __react_refresh_test__;\n\t\t}\n\t\treturn __react_refresh_utils__.executeRuntime(\n\t\t\texports,\n\t\t\t$ReactRefreshModuleId$,\n\t\t\tmodule.hot,\n\t\t\terrorOverlay,\n\t\t\ttestMode\n\t\t);\n\t}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}","__webpack_require__.h = () => (\"b6a0663cd2ad1312d44a\")"],"names":[],"sourceRoot":""}